#!/bin/bash

################################################################################
# Globals                                                                      #
################################################################################
FILE_LOCATION=$1
COLOR_RED="\033[91m"
COLOR_YELLOW="\033[93m"
COLOR_RESET="\033[m"

################################################################################
# Help                                                                         #
################################################################################
Help()
{
   # Display Help
   echo "Usage: g-ssl-info [options] directory"
   echo "A simple SSL utility that provides basic info about an SSL bundle"
   echo
   echo "Options:"
   echo "  -h     Print this help"
   echo
}

################################################################################
# Process the input options                                                    #
################################################################################
# Get the options
while getopts ":h" option; do
   case $option in
      h) # Display help
         Help
         exit;;
     \?) # Incorrect option
         echo "Error: Invalid option"
         exit;;
   esac
done

################################################################################
# Print banner                                                                 #
################################################################################
echo "   ______    ______            __    ";
echo "  / ____/   /_  __/___  ____  / /____";
echo " / / ________/ / / __ \/ __ \/ / ___/";
echo "/ /_/ /_____/ / / /_/ / /_/ / (__  ) ";
echo "\____/     /_/  \____/\____/_/____/  ";
echo "                                     ";

echo "SSL Info (https://github.com/glenndehaan/bash-utils)"
echo

################################################################################
# Check dependencies                                                           #
################################################################################
if ! type "openssl" > /dev/null; then
    echo -e "${COLOR_RED}[FATAL]${COLOR_RESET} Please install OpenSSL prior to running this command!"
    exit 1;
fi

################################################################################
# Check if path is given                                                       #
################################################################################
if [ -z "$FILE_LOCATION" ]; then
    echo -e "${COLOR_RED}[FATAL]${COLOR_RESET} Please provide a path to the SSL files like this: g-ssl-info ./www.example.com"
    exit 2;
fi

################################################################################
# Display SSL Info                                                             #
################################################################################
REAL_FILE_LOCATION=$(realpath ${FILE_LOCATION})
FILE_NAME=${REAL_FILE_LOCATION##*/}

## Check if all certificate files are in place and get file info if they are there
if [ ! -f "${REAL_FILE_LOCATION}/${FILE_NAME}.csr" ]; then
    echo "[WARNING] Missing Certificate Request file in: ${REAL_FILE_LOCATION}/${FILE_NAME}.csr"
    CSR_INFO=0
else
    CSR_INFO=$(openssl req -text -noout -in ${REAL_FILE_LOCATION}/${FILE_NAME}.csr)
fi

if [ ! -f "${REAL_FILE_LOCATION}/${FILE_NAME}.crt" ]; then
    echo "[WARNING] Missing Certificate file in: ${REAL_FILE_LOCATION}/${FILE_NAME}.crt"
    CRT_INFO=0
else
    CRT_INFO=$(openssl x509 -in ${REAL_FILE_LOCATION}/${FILE_NAME}.crt -text -noout | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g' | tr -s " ")
fi

if [ "$CSR_INFO" != 0 ]; then
    CSR_INFO_C=$(echo ${CSR_INFO} | sed 's/^.*C = \(.*\), ST = .*$/\1/')
    CSR_INFO_ST=$(echo ${CSR_INFO} | sed 's/^.*ST = \(.*\), L = .*$/\1/')
    CSR_INFO_L=$(echo ${CSR_INFO} | sed 's/^.*L = \(.*\), O = .*$/\1/')
    CSR_INFO_O=$(echo ${CSR_INFO} | sed 's/^.*O = \(.*\), OU = .*$/\1/')
    CSR_INFO_OU=$(echo ${CSR_INFO} | sed 's/^.*OU = \(.*\), CN = .*$/\1/')
    CSR_INFO_CN=$(echo ${CSR_INFO} | sed 's/^.*CN = \(.*\), emailAddress = .*$/\1/')
    CSR_INFO_E=$(echo ${CSR_INFO} | sed 's/^.*emailAddress = \(.*\) Subject.*$/\1/')

    CSR_INFO_DNS=$(openssl req -text -noout -in ${REAL_FILE_LOCATION}/${FILE_NAME}.csr | grep -oP '(?<=DNS:)[^,]+' | sort -uV)

    ## Check if an email address is set
    if [ ${#CSR_INFO_CN} -ge 25 ]; then
        CSR_INFO_CN=$(echo ${CSR_INFO} | sed 's/^.*CN = \(.*\) Subject Public Key Info: .*$/\1/')
        CSR_INFO_E=""
    fi

    echo -e "${COLOR_YELLOW}Certificate Request Info:${COLOR_RESET}"

    echo "Country Code: $CSR_INFO_C"
    echo "State or Province Name: $CSR_INFO_ST"
    echo "Locality Name: $CSR_INFO_L"
    echo "Organization Name: $CSR_INFO_O"
    echo "Organizational Unit Name: $CSR_INFO_OU"
    echo "Common Name: $CSR_INFO_CN"
    echo "Email address: $CSR_INFO_E"
    echo "Subject Alternative Name(s):" $CSR_INFO_DNS
    echo ""
fi

if [ "$CRT_INFO" != 0 ]; then
    CRT_INFO_BEFORE=$(echo ${CRT_INFO} | sed 's/^.*Before: \(.*\) Not.*$/\1/')
    CRT_INFO_AFTER=$(echo ${CRT_INFO} | sed 's/^.*After : \(.*\) Subject: .*$/\1/')
    CRT_CN=$(echo ${CRT_INFO} | sed 's/^.*CN = \(.*\) Subject Public Key Info: .*$/\1/')

    CRT_INFO_DNS=$(openssl x509 -in ${REAL_FILE_LOCATION}/${FILE_NAME}.crt -text -noout | grep -oP '(?<=DNS:)[^,]+' | sort -uV)

    echo -e "${COLOR_YELLOW}Certificate Info:${COLOR_RESET}"

    echo "Common Name: $CRT_CN"
    echo "Subject Alternative Name(s):" $CRT_INFO_DNS
    echo "Not Valid Before: $CRT_INFO_BEFORE"
    echo "Not Valid After: $CRT_INFO_AFTER"
fi
